name: Install LDC & make portable
inputs:
  arch:
    required: false # Windows only
  cross_compiling:
    required: false
    default: false
runs:
  using: composite
  steps:

    - name: Install LDC
      shell: bash
      run: |
        set -eux
        cd ..

        if [[ '${{ inputs.cross_compiling }}' != true ]]; then
          cd build
          ninja install >/dev/null
          cd ..
        else
          mkdir -p install/bin
          cp build-cross/bin/{ldc2,ldmd2,ldc-build-runtime,ldc-profdata,ldc-profgen,ldc-prune-cache,timetrace2txt} install/bin/
          cp build-cross/bin/ldc-build-plugin install/bin/ || true
          cp -R build-cross-libs/lib install/
          cp build-cross/lib/{libldc_rt.*,libLTO-ldc.dylib,LLVMgold-ldc.so} install/lib/ || true
          mkdir install/etc
          cp build-cross/bin/ldc2_install.conf install/etc/ldc2.conf
          cp -R opend/ldc/packaging/bash_completion.d install/etc/
          mkdir install/import
          cp -R opend/druntime/src/{core,etc,ldc,object.d,__builtins.di,importc.h} install/import/
          cp bootstrap-ldc/runtime/import/ldc/gccbuiltins_*.di install/import/ldc/
          cp -R opend/phobos/etc/c install/import/etc/
          rm -rf install/import/etc/c/zlib
          cp -R opend/phobos/std install/import/
        fi

        cp opend/ldc/LICENSE install/
        if [[ '${{ runner.os }}' == Windows ]]; then
          cp opend/ldc/packaging/README.txt install/
        else
          cp opend/ldc/packaging/README install/
        fi

        set +eux
        cp opend/generated/*/release/64/*.a install/lib
        cp -a opend/generated/*/release/64/*.so* install/lib
        cp -a opend/generated/*/release/64/*.dylib* install/lib
        cp opend/generated/*/release/64/*.lib install/lib
        cp opend/generated/*/release/64/*.dll install/lib
        cp opend/generated/*/release/64/dmd install/bin
        cp opend/generated/*/release/64/dmd.exe install/bin
        cp c:/program\ files/llvm/bin/lld-link.exe install/bin
        echo -e '[Environment64]\nDFLAGS=-I%@P%/../import -L-L%@P%/../lib -L--export-dynamic -fPIC' > install/bin/dmd.conf
        if [[ '${{ runner.os }}' == Windows ]]; then
          echo -e '[Environment64]\nDFLAGS=-I%@P%/../import ucrtbase.lib\nLIB=%@P%/../lib;%@P%/../lib/mingw' > install/bin/dmd.conf
        fi
        if [[ '${{ runner.os }}' == macOS ]]; then
          echo -e '[Environment64]\nDFLAGS=-I%@P%/../import -L-L%@P%/../lib -fPIC' > install/bin/dmd.conf
        fi
        cp opend/phobos/generated/*/release/64/*.a install/lib
        cp -a opend/phobos/generated/*/release/64/*.so* install/lib
        cp -a opend/phobos/generated/*/release/64/*.dylib* install/lib
        cp opend/phobos/generated/*/release/64/*.lib install/lib
        cp opend/phobos/phobos64.lib install/lib
        cp opend/phobos/generated/*/release/64/*.dll install/lib
        echo done

    - name: Make portable
      shell: bash
      run: |
        set -eux
        cd ..
        absInstallDir="$PWD/install"
        if [[ '${{ runner.os }}' == Windows ]]; then
          # /d/a/1/install => D:/a/1/install
          absInstallDir=$(cygpath --mixed "$absInstallDir")
        fi
        perl -pi -e "s|$absInstallDir/|%%ldcbinarypath%%/../|g" install/etc/ldc2.conf
        cat install/etc/ldc2.conf

    - name: Rename the installation dir to test portability
      shell: bash
      run: mv ../install ../installed

    - name: 'Windows: Copy curl & MinGW-w64-based libs'
      if: runner.os == 'Windows'
      shell: bash
      run: |
        set -eux
        cd ..

        cp libcurl/ldc2/libcurl.dll installed/bin/
        cp libcurl/ldc2/*.* installed/lib/

        curl -fL --retry 3 --max-time 60 -o mingw-w64-libs.7z \
          https://github.com/ldc-developers/mingw-w64-libs/releases/download/v8.0.0/mingw-w64-libs-v8.0.0.7z
        mkdir mingw-w64-libs
        cd mingw-w64-libs
        7z x ../mingw-w64-libs.7z >/dev/null
        rm ../mingw-w64-libs.7z

        if [[ '${{ inputs.arch }}' == x86 ]]; then
          model=32
        else
          model=64
        fi
        cp -r "lib$model" ../installed/lib/mingw
